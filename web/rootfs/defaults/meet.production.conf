{{ $ENABLE_XMPP_WEBSOCKET := .Env.ENABLE_XMPP_WEBSOCKET | default "0" | toBool }}

server_name _;

client_max_body_size 0;

root /web/jitsi-meet;

# ssi on with javascript for multidomain variables in config.js
ssi on;
ssi_types application/x-javascript application/javascript;

index index.html index.htm;
error_page 404 /static/404.html;

location = /config.js {
    if (-f /config/config.${subdomain}js) {
        set $target /config/config.${subdomain}js;
        break;
    }

    set $target /config/config.js;
    alias $target;
}

location = /interface_config.js {
    if (-f /config/interface_config.${subdomain}js) {
        set $target /config/interface_config.${subdomain}js;
        break;
    }

    set $target /config/interface_config.js;
    alias $target;
}

location = /external_api.js {
    alias /web/jitsi-meet/libs/external_api.min.js;
}

location ~ ^/custom-(static|images|fonts|lang|sounds)/(.*)$
{
    add_header 'Access-Control-Allow-Origin' '*';
    alias /config/custom-$1/$2;
}

# ensure all static content can always be found first
location ~ ^/(libs|css|static|images|fonts|lang|sounds|connection_optimization|.well-known)/(.*)$
{
    add_header 'Access-Control-Allow-Origin' '*';
    alias /web/jitsi-meet/$1/$2;
}

# BOSH
location = /http-bind {
    proxy_pass {{ .Env.XMPP_BOSH_URL_BASE }}/http-bind;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
}

{{ if $ENABLE_XMPP_WEBSOCKET }}
# xmpp websockets
location = /xmpp-websocket {
    proxy_pass {{ .Env.XMPP_BOSH_URL_BASE }}/xmpp-websocket?prefix=$prefix&$args;
    proxy_http_version 1.1;

    proxy_set_header Connection "upgrade";
    proxy_set_header Upgrade $http_upgrade;

    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
    # proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Real-IP $remote_addr;
    # proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_read_timeout 60s;
    tcp_nopush on;
    tcp_nodelay on;
}
{{ end }}

location ~ ^/([^/?&:'"]+)$ {
    try_files $uri @root_path;
}

location @root_path {
    rewrite ^/(.*)$ / break;
}

# colibri (JVB) websockets for jvb
location ~ ^/colibri-ws/([^/]*)/(.*) {
    proxy_pass http://$1:9090/colibri-ws/$1/$2$is_args$args;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
    tcp_nodelay on;
}

{{ if .Env.ETHERPAD_URL_BASE }}
# Etherpad-lite
location /etherpad/ {
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host $host;
    proxy_cache_bypass $http_upgrade;

    proxy_pass {{ .Env.ETHERPAD_URL_BASE }}/;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_buffering off;
    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
}
{{ end }}

{{ if .Env.ETHERPAD_WHITEBOARD_URL_BASE }}
    include /config/nginx/whiteboard.conf;
{{ end }}

{{ if and .Env.VMEETING_FRONT_BASE .Env.VMEETING_FRONT_PORT }}
# auth page
location ~ {{ .Env.VMEETING_FRONT_BASE }} {
    rewrite ^{{ .Env.VMEETING_FRONT_BASE }}/(.*)$ /$1 break;
    proxy_pass       http://vmfront:{{ .Env.VMEETING_FRONT_PORT }};
    proxy_redirect   off;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
}
{{ end }}

{{ if and .Env.VMEETING_API_BASE .Env.VMEETING_API_PORT }}
# auth api
{{ if .Env.VMEETING_API_BASE | substr 0 4 | eq "http" }}
location ~ ^/auth/api {
    rewrite ^/auth/api/(.*)$ /$1 break;
    proxy_pass       http://vmapi:{{ .Env.VMEETING_API_PORT }};
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_cache_bypass $http_upgrade;
    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
    proxy_redirect off;
}
{{ else }}
location ~ ^{{ .Env.VMEETING_API_BASE }} {
    rewrite ^{{ .Env.VMEETING_API_BASE }}/(.*)$ /$1 break;
    proxy_pass       http://vmapi:{{ .Env.VMEETING_API_PORT }};
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_cache_bypass $http_upgrade;
    proxy_set_header Host {{ .Env.XMPP_DOMAIN }};
    proxy_redirect off;
}
{{ end }}
{{ end }}

{{ if .Env.VMEETING_GRAFANA_BASE }}
# monitoring api
location ~ ^{{ .Env.VMEETING_GRAFANA_BASE }} {
    proxy_pass http://grafana:3000;
}
{{ end }}

{{ if .Env.RECORDING_DOWNLOAD_BASE }}
# download files
location ~ ^{{ .Env.RECORDING_DOWNLOAD_BASE }}/(.+)$ {
    alias  /recordings/$1;
    # force download
    add_header Content-disposition "attachment";
}
{{ end }}

location ~ ^/([^/?&:'"]+)/config.js$ {
    set $subdomain "$1.";
    set $subdir "$1/";

    alias /config/config.js;
}

#Anything that didn't match above, and isn't a real file, assume it's a room name and redirect to /
location ~ ^/([^/?&:'"]+)/(.*)$ {
    set $subdomain "$1.";
    set $subdir "$1/";
    rewrite ^/([^/?&:'"]+)/(.*)$ /$2;
}

# BOSH for subdomains
location ~ ^/([^/?&:'"]+)/http-bind {
    set $subdomain "$1.";
    set $subdir "$1/";
    set $prefix "$1";

    rewrite ^/(.*)$ /http-bind;
}

# websockets for subdomains
location ~ ^/([^/?&:'"]+)/xmpp-websocket {
    set $subdomain "$1.";
    set $subdir "$1/";
    set $prefix "$1";

    rewrite ^/(.*)$ /xmpp-websocket;
}
